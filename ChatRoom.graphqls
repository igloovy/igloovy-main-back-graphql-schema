extend type Mutation {

    # [ClientAndAbove] creates a chat room
    createChatRoom(initialChatRoomInput: InitialChatRoomInput): ChatRoom!

    # [ClientAndAbove]
    addUserToChatRoom(chatRoomId: Long! userIds: [Long!]!): ChatRoom!

    # [ClientAndAbove]
    removeUserFromChatRoom(chatRoomId: Long! userIds: [Long!]!): ChatRoom!

    # [ClientAndAbove]
    postMessageInChatRoom(chatRoomId: Long! submittable: ChatRoomSubmittable): ChatRoomMessage!

    # [ClientAndAbove]
    editChatRoomMessage(messageId: Long! submittable: ChatRoomSubmittable): ChatRoomMessage!

}

extend type Query {

    # [ClientAndAbove]
    getChatRoomById(chatRoomId: Long!): ChatRoom!

    # [ClientAndAbove]
    getChatRoomMessageById(messageId: Long!): ChatRoomMessage!

    # [ClientAndAbove]
    lastMessagesOfAllChatRooms: [ChatRoomMessage!]!

}

extend type Subscription {
    subscribeChatRoomMessage: ChatRoomMessage!
}

extend type Self {
    joinedChatRooms: [ChatRoom!]!
}

input ChatRoomSubmittable {
    text: String = null
    files: [UUID!] = null
}

input InitialChatRoomInput {
    name: String!
    userIds: [Long!] = []
}

interface ChatRoomMessage implements ImmutableUserItem {
    messageId: Long!
    createdBy: User!
    chatRoom: ChatRoom!
    createdDate: Date!
}

interface Modifiable {
    lastModifiedDate: Date
}

type TextChatRoomMessage implements ChatRoomMessage & ImmutableUserItem & Modifiable {
    messageId: Long!
    createdBy: User!
    chatRoom: ChatRoom!
    createdDate: Date!
    lastModifiedDate: Date

    #######
    text: String!
}

type FileChatRoomMessage implements ChatRoomMessage & ImmutableUserItem {
    messageId: Long!
    createdBy: User!
    chatRoom: ChatRoom!
    createdDate: Date!

    #######
    files: [File!]!
}

type TextFileChatRoomMessage implements ChatRoomMessage & ImmutableUserItem & Modifiable {
    messageId: Long!
    createdBy: User!
    chatRoom: ChatRoom!
    createdDate: Date!
    lastModifiedDate: Date

    #######
    text: String!
    files: [File!]!
}

type ChatRoom {
    chatRoomId: Long!
    createdDate: Date!
    name: String!
    chatRoomOwner: User!
    chatRoomUsers: [User!]!
    exploreChatRoomMessages(size: Int! lastMessageId: Long = null searchParam: String = null): [ChatRoomMessage!]!

    numberOfUsers: Long!
}