type Passport{
    passportId: Long!
    information: PassportInformation!
    createdDate: Date!
    price: Long!
    building: Building!
    processors:[PassportProcessor!]!
    processorsAsJson: String!
    anyEventMessageExistFromThisPassport: Boolean!
    exploreMembers(lastMemberId: Long = null size: Int!): [User!]!
    isUseAble: Boolean!

    # --- calculated ---
    numberOfMembers: Long!
}

type PassportMutation {
    grantMembership(userIds: [Long!]!): PassportMutation!
    membershipRevocation(userIds: [Long!]!): PassportMutation!
}

type PassportInformation{
    name: String!
    description: String!
}

union PassportProcessor =  ActivationPassportProcessor | TimePassportProcessor  | UserPassportProcessor | LogicOrPassportProcessor

extend type Query {
    getPassportById(passportId: Long!): Passport!

    isPassportMember(passportId: Long!): Boolean!
}

extend type CircleMutation {
    passportIssuance(information: PassportInformationInput! processorsAsJson: String! mapType: String! price: Long): Passport!
    passportRenewal(passportId: Long! information: PassportInformationInput! processorsAsJson: String! price: Long): Passport!
    passportCancellation(passportId: Long!): CircleMutation
}

extend type Circle {
    explorePassports(onlyJoinAbles: Boolean lastPassportId: Long size: Int!): [Passport!]!
}

extend type Building {
    passports: [Passport!]!
}

extend type Self {
    passportMemberships: [Passport!]!
}

type TimePassportProcessor{
    cronString: String!
}

type ActivationPassportProcessor{
    active: Boolean!
}

type UserPassportProcessor{
    whiteRoleIds: [Long!]!
    whiteUserIds: [Long!]!
    blackUserIds: [Long!]!
}

type LogicOrPassportProcessor{
    anyOf: [PassportProcessor!]!
}

input PassportInformationInput{
    name: String!
    description: String!
}

######

type EventMessage implements MultipartReactable & ImmutableUserItem & Reactable & Multipart{
    reactableId: Long!
    createdBy: User!
    text: String!
    files: [File!]!
    createdDate: Date!
    lastModifiedDate: Date
    reactions: [Comment!]!
    reactionsCount: Int!
    emojis: [Emoji!]!
    actualRoot: EventMessage!
    numberOfAllReactions: Int!

    passport: Passport!
}

extend type Mutation {
    submitPassportEventMessage(passportId: Long! subCircleId: Long!): EventMessage!

    #[ClientAndAbove] returns Passport if price is free/zero otherwise returns a Payment Session
    requestPassportMembership(passportId: Long!): PassportMembershipResponse!
}

union PassportMembershipResponse = Passport | Session