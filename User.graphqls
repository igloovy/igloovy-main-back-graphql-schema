extend type Query{
    # [ClientAndAbove]
    self: Self!
}
extend type Mutation {
    # [ClientAndAbove]
    selfMutation: SelfMutation!
    # [OnlyAnon]
    registerWithEmailAndPassword(email: Email!, password: String!, displayName: String): SelfMutation!
}


interface SelfData{
    userId: Long!
    displayName: String!
    email: Email!
    subscribedCategories: [Category!]!
}

type Self implements SelfData{
    userId: Long!
    displayName: String!
    email: Email!
    subscribedCategories: [Category!]!
}

type SelfMutation implements SelfData{
    userId: Long!
    displayName: String!
    email: Email!
    subscribedCategories: [Category!]!

    setPassword(password: String!): SelfMutation!
    setDisplayName(displayName: String!): SelfMutation!

    addSubscribedCategory(categoryId: Long!): SelfMutation!
    removeSubscribedCategory(categoryId: Long!): SelfMutation!
}


enum Authority{
    ROLE_ANONYMOUS
    ROLE_CLIENT,
    ROLE_ADMIN
}
