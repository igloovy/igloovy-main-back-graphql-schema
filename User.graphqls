extend type Query{
    # [ClientAndAbove]
    self: Self!
    # [ClientAndAbove]
    getUserById(userId: Long!): User!
}
extend type Mutation {
    # [ClientAndAbove]
    selfMutation: SelfMutation!
    # [OnlyAnon]
    registerWithEmailAndPassword(email: Email!, password: String!, displayName: String): SelfMutation!
}

interface PublicUserData{
    userId: Long!
    displayName: String!
    createdDate: Date!
    userTag: String!
    avatarPicture: File
    aboutMe: String
    immersiveAvatar: Int!
}

interface SelfData{
    email: Email!
    birthDay: Date
    gender: Gender!
    hasPassword: Boolean!
}

type Self implements SelfData & PublicUserData{
    userId: Long!
    displayName: String!
    email: Email!
    createdDate: Date!
    userTag: String!
    gender: Gender!
    avatarPicture: File
    birthDay: Date
    aboutMe: String
    hasPassword: Boolean!
    immersiveAvatar: Int!
}

type SelfMutation {
    setPassword(newPassword: String!, oldPassword: String): SelfMutation!
    setDisplayName(displayName: String!): SelfMutation!
    setAboutMe(aboutMe: String): SelfMutation!
    setBirthDay(birthDay: Date): SelfMutation!
    setGender(gender: Gender): SelfMutation!
    setAvatar(fileId: UUID): SelfMutation!
    setImmersiveAvatar(avatar: Int!): SelfMutation!

    # Apparently this sad API is my last commit in iglooyv,
    # when i was implementing setBirthDay in couple of lines above here i wouldn't thought i end up here, alas!
    # dear future developer(s), please forgive me for imperfections that bother your eyes her and there
    # feel free to reach me out if you had any questions or just wanted to discuss anything
    # sincerely
    # Human Ardaki
    closeMyAccount: SelfMutation!

    commit: Self!
}


enum Authority{
    ROLE_ANONYMOUS
    ROLE_CLIENT,
    ROLE_ADMIN
}
enum Gender{
    MALE,
    FEMALE,
    PREFER_NOT_TO_TELL
}
type User implements PublicUserData{
    userId: Long!
    displayName: String!
    createdDate: Date!
    userTag: String!
    avatarPicture: File
    aboutMe: String
    immersiveAvatar: Int!
}

interface ImmutableUserItem{
    createdBy: User!
    createdDate: Date!
}