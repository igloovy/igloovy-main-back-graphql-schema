extend type Query {
    # [EveryOne] given :circleId returns Circle associated with this Id
    getCircleById(circleId: Long!): Circle!

    # [ClientAndAbove] permissions required
    getSubCircleById(subCircleId: Long!): SubCircle!

    # [EveryOne] search and explore on circles. :searchParam is optional to narrow searching, paginate using :lastCircleId (seek loadMore)
    exploreCircles(lastCircleId: Long size: Int! searchParam: String): [Circle!]!

    # [ClientAndAbove]
    viewUserInCircle(userId: Long! circleId: Long!): CircleUser!

    # [ClientAndAbove]
    exploreTrendingCircles(lastId: Long size: Int! = 10): [Circle!]!
}

extend type Self {
    ownedCircles: [Circle!]!
    joinedCircles: [Circle!]!
}

extend type Mutation {
    # [ClientAndAbove] do operations (mutations) regarding a circle
    mutateCircleById(circleId: Long!): CircleMutation!
    # [ClientAndAbove] join circle by token, throws  {NotFound : "token doesn't exist", AlreadyExist : "already in Circle", BadState: "token is expired or you are not allowed to use this token"}
    joinCircleById(circleId: Long!): Circle!
    # [ClientAndAbove] do operations on subCircle
    mutateSubCircleById(subCircleId: Long!): SubCircleMutation!
}

type Circle{
    circleId: Long!
    createdDate: Date!
    information: CircleInformation!
    exploreUsers( size: Int! lastCircleUserId: Long = null searchParam: String = null): [CircleUser!]!
    circleOwner: CircleUser!
    subCircles: [SubCircle!]!
    defaultSubCircle: SubCircle!
    everyOneRole: Role!

    # --- calculated ---
    numberOfUsers: Long!

}

type SubCircle{
    subCircleId: Long!
    subCircleName: String!
    parentCircle: Circle!
}

type CircleInformation{
    name: String!
    isPrivate: Boolean!
    description: String
    websiteUrl: URL
    logoPicture: File
    bannerPicture: File
}

type CircleUser implements PublicUserData{
    userId: Long!
    displayName: String!
    createdDate: Date!
    userTag: String!
    avatarPicture: File
    aboutMe: String
    immersiveAvatar: Int!
    # ---- extra ----
    roles: [Role!]!
}

type CircleMutation {

    # [ClientAndAbove] change name of this circle (permission required)
    setName(name: String!): CircleMutation!
    # [ClientAndAbove] change name of this circle (permission required)
    setDescription(description: String): CircleMutation!
    # [ClientAndAbove] change name of this circle (permission required)
    setWebsiteUrl(websiteUrl: URL): CircleMutation!
    # [ClientAndAbove] change name of this circle (permission required)
    setLogoPicture(fileId: UUID): CircleMutation!
    # [ClientAndAbove] change name of this circle (permission required)
    setBannerPicture(fileId: UUID): CircleMutation!
    # [ClientAndAbove] make this circle private (permission required)
    makeItPrivate: CircleMutation!
    # [ClientAndAbove] make this circle public (permission required)
    makeItPublic: CircleMutation!

    # [ClientAndAbove] delete user by id of this circle
    deleteCircleUser(circleUserId: Long!): CircleMutation!

    # [ClientAndAbove] create a subCircle
    createSubCircle(subCircleName: String!): SubCircle!
    # [ClientAndAbove] a terminal operation to get required data after one (or multiple chain) operation(s)
    commit: Circle!
    # [ClientAndAbove] delete the circle entirely
    delete: Void
    # [ClientAndAbove] set archive status of the server the circle
    archive(status: Boolean): Void
    # [ClientAndAbove] leave circle
    leaveCircle: Void
}

type SubCircleMutation{
    # [ClientAndAbove] change name of subCircle by id
    changeSubCircleName(subCircleNewName: String!): SubCircleMutation!
    # [ClientAndAbove] delete subCircle by id
    deleteSubCircle: Void
    # [ClientAndAbove] archive subCircle by id
    archiveSubCircle(status: Boolean): Void
    # [ClientAndAbove] a terminal operation to get required data after one (or multiple chain) operation(s)
    commit: SubCircle!
}