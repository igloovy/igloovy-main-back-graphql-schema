# represents an immersive experience
type ImmersiveTemplate{
    immersiveTemplateId: Long!
    name: String!
    description: String!
    logo: File!
    createdDate: Date!
    subAreas: [ImmersiveSubArea!]!
}
# represents a SubArea in an immersive experience
type ImmersiveSubArea{
    immersiveSubAreaId: Long!
    name: String!
    description: String!
    logo: File!
    createdDate: Date!
}

extend type Query {
    exploreImmersiveTemplates(
        lastId: Long
        size: Int!
        searchParam: String
    ): [ImmersiveTemplate!]!
    getImmersiveTemplateById(immersiveTemplateId: Long!): ImmersiveTemplate!
}

extend type Mutation {
    # [AdminOnly]
    addOrUpdateImmersiveTemplate(
        immersiveTemplateId: Long,
        immersiveTemplateInput: ImmersiveTemplateInput!
    ): ImmersiveTemplate!
    # [AdminOnly]
    addOrUpdateImmersiveSubArea(
        immersiveSubAreaId: Long,
        immersiveTemplateId: Long!,
        immersiveSubAreaInput: ImmersiveTemplateInput!
    ): ImmersiveSubArea!
}

input ImmersiveTemplateInput{
    name: String!
    description: String!
    logo: UUID!
}

extend type CircleMutation {
    attachCircleToImmersiveTemplate(immersiveTemplateId: Long!): CircleMutation!
    attachSubCircleToImmersiveSubArea(subCircleId: Long! ,immersiveSubAreaId: Long!): CircleMutation!
}

extend type Circle {
    associatedImmersiveTemplate: ImmersiveTemplate
}

extend type SubCircle {
    associatedImmersiveSubArea: ImmersiveSubArea
    immersiveConnectionUrl: URL
}