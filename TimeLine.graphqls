extend type Query{

    # [EveryOne when TimeLine ClientAndAbove for subcircles] given last id of current page, loads $size more of posts, if :subCircleId is provided it would only be execute against subCircle
    explorePosts(
        lastId: Long
        size: Int!
        subCircleId: Long @optional(narrows: "subCircle")
        searchParam: String = null
        sortBy: ExplorePostSort! = CREATED_DATE_DESCEND
    ): [MultipartReactable!]!

    # [ClientAndAbove] given $reactableId returns respective Reactable, throws NotFound
    getReactableById(reactableId: Long!): Reactable!

    # [ClientAndAbove] given $multipartReactableId returns respective MultipartReactable, throws NotFound
    getMultipartReactableById(multipartReactableId: Long!): MultipartReactable!

    # [ClientAndAbove] given $postId returns respective Post, throws NotFound
    getPostById(postId: Long!): Post!

    # [ClientAndAbove] given $commentId returns respective Comment, throws NotFound
    getCommentById(commentId: Long!): Comment!

    # [ClientAndAbove] given $userId and $page returns Posts of user paginated, throws NotFound (userId)
    getPostsOfUser(userId: Long!  page: Page!): PostPage!
    # [ClientAndAbove] given $userId and $page returns Comments of user paginated, throws NotFound (userId)
    getCommentsOfUser(userId: Long!  page: Page!): CommentPage!

    getReactableWithAllParents(reactableId: Long!): [Reactable!]!
}

extend type Mutation {

    # [ClientAndAbove] submit a post in general timeline, if :subCircleId is provided post will be submitted in subCircle, throws access denied if it's not possible
    submitPost(submittable: Submittable! subCircleId: Long @optional(narrows: "subCircle")): Post!

    # [ClientAndAbove] submit a comment under given $reactable
    submitComment(submittable: Submittable! reactableId: Long!): Comment!

    # [ClientAndAbove] react with an emoji on a multipartReactable
    reactWithEmoji(emojiUnicode: String! multipartReactableId: Long!): MultipartReactable!

    # [ClientAndAbove] edit reactable with given $reactableId, throws NotFound (reactableId) or access denied if it's not possible
    editReactable(reactableId: Long! submittable: Submittable!): MultipartReactable!
}

input Submittable {
    text: String!
    files: [UUID!]!
}

# any thing which can be reacted on
interface Reactable implements ImmutableUserItem{
    reactableId: Long!
    createdBy: User!
    createdDate: Date!
    lastModifiedDate: Date
    reactions: [Reactable!]!
    reactionsCount: Int!
    actualRoot: Reactable!
}

interface Multipart{
    text: String!
    files: [File!]!
}

interface MultipartReactable implements Reactable & Multipart & ImmutableUserItem{

    reactableId: Long!
    createdBy: User!
    createdDate: Date!
    lastModifiedDate: Date
    reactions: [MultipartReactable!]!
    reactionsCount: Int!
    actualRoot: Reactable!

    text: String!
    files: [File!]!

    # [Computed]
    emojis: [Emoji!]!
}


type Post implements MultipartReactable & Multipart & Reactable & ImmutableUserItem{
    reactableId: Long!
    createdBy: User!
    text: String!
    files: [File!]!
    createdDate: Date!
    lastModifiedDate: Date
    reactions: [Comment!]!
    reactionsCount: Int!
    emojis: [Emoji!]!
    actualRoot: Post!

    numberOfAllReactions: Int!
}


type Comment implements MultipartReactable & Multipart & Reactable & ImmutableUserItem{
    reactableId: Long!
    createdBy: User!
    text: String!
    files: [File!]!
    createdDate: Date!
    lastModifiedDate: Date
    emojis: [Emoji!]!
    reactions: [Comment!]!
    reactionsCount: Int!
    parent: Reactable!
    actualRoot: Post!
}

type Emoji{
    unicode: String!
    # [Computed]
    count: Long!
}

enum ExplorePostSort {
    CREATED_DATE_DESCEND,
    CREATED_DATE_ASCEND,
    MOST_NUMBER_OF_REACTIONS
}