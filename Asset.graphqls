extend type Query {
    # [ClientAndAbove] explore available collections in whole system
    exploreCollections(lastId: Long = null size: Int! = 10 filter: String): [Collection!]!
    # [ClientAndAbove]
    getCollectionById(collectionId: Long!) : Collection!
    # [ClientAndAbove]
    getAssetById(assetId: Long!): Asset!
}

extend type Self {
    # explore owned assets
    exploreOwnedAssets(lastId: Long=null size: Int! = 10): [OwnedAsset!]!
    # explore owned collections
    exploreOwnedCollections(lastId: Long=null size: Int! = 10): [Collection!]!
}

extend type Mutation {
    createCollection(name: String!): Collection!
    createAsset(collectionId: Long! assetInput: AssetInput!): OwnedAsset!
}

interface IAsset{
    assetId: Long!
    content: File!
    name: String!
    collection: Collection!
    createdDate: Date!
    numberOfCopies: Int!
}
interface IOwnedAsset implements IAsset{
    assetId: Long!
    content: File!
    name: String!
    collection: Collection!
    createdDate: Date!
    numberOfCopies: Int!
    owner: PublicUserData!
}

input AssetInput{
    contentId: UUID!
    name: String!
}

type Asset implements IAsset{
    assetId: Long!
    content: File!
    name: String!
    collection: Collection!
    createdDate: Date!
    numberOfCopies: Int!
}
type OwnedAsset implements IOwnedAsset & IAsset{
    assetId: Long!
    content: File!
    name: String!
    collection: Collection!
    createdDate: Date!
    numberOfCopies: Int!
    owner: PublicUserData!
}


type Collection{

    collectionId: Long!
    name: String!
    creator: PublicUserData!
    createdDate: Date!

    exploreAssets(lastId: Long=null size: Int! = 10): [IAsset!]!
    exploreOwnedAssets(lastId: Long=null size: Int! = 10): [IOwnedAsset!]!
}