type Tile {
    coordinate: CubicCoordinate!
    empire: Empire
    owned: Boolean!
    buildings: [Building!]!
    price: Float!
    priceHistory: [Float!]!
}

type Empire implements ImmutableUserItem{
    empireId: Long!
    createdBy: User!
    createdDate: Date!
    tiles: [Tile!]!
    buildings: [Building!]!
    circle: Circle!
    information: CircleInformation!
    centralCoordinate: CubicCoordinate!
    numberOfTiles: Int!
}

extend type Circle {
    empire: Empire!
}

type Building{
    buildingId: Long!
    empire: Empire!
    tile: Tile!
    state: String!
}

type CubicCoordinate{
    x: Float!
    y: Float!

    r: Int!
    s: Int!
    q: Int!
}

input Coordinate{
    r: Int!
    s: Int!
    q: Int!
}

input CircleInformationInput{
    circleName: String!
    description: String
    websiteUrl: URL
    logoPicture: UUID
    bannerPicture: UUID
}

extend type Mutation {
    # [AdminOnly]
    generateRings(number: Int!): Void
    # [ClientAndAbove] creates new empire
    establishEmpire(circleInformation: CircleInformationInput!, tiles: [Coordinate!]!): Empire!
    # [ClientAndAbove] only owner of the empire
    updateEmpireTerritory(empireId: Long!, tiles: [Coordinate!]!): Empire!
}

union MapBlock = Empire | Tile
extend type Query {
    # [EveryOne] scale from 0 (most close) to 1 (most far), at around 0.2 it starts giving your Tile otherwise Empire
    # 1.77 = 16/9
    exploreLand(scale: Float! centeredAt: Coordinate! = {r:0 s:0 q:0} aspectRation: Float! = 1.77): [MapBlock!]!
    # [EveryOne]
    getEmpireById(empireId: Long!): Empire!
}

extend type Self {
    ownedEmpires: [Empire!]!
}